;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: S
;; TLB: _ a:int257 b:int257 = S
;;

(int, int) $S$_from_tuple(tuple v) inline {
    var (int v'a, int v'b) = __tact_tuple_destroy_2(v);
    return (v'a, v'b);
}

(int, int) $S$_to_external(((int, int)) v) inline {
    var (v'a, v'b) = v; 
    return (v'a, v'b);
}

;;
;; Type: SetIdAndData
;; Header: 0x681868bd
;; TLB: set_id_and_data#681868bd id:int257 data:^cell = SetIdAndData
;;

builder $SetIdAndData$_store(builder build_0, (int, cell) v) inline {
    var (v'id, v'data) = v;
    build_0 = store_uint(build_0, 1746430141, 32);
    build_0 = build_0.store_int(v'id, 257);
    build_0 = build_0.store_ref(v'data);
    return build_0;
}

(slice, ((int, cell))) $SetIdAndData$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 1746430141);
    var v'id = sc_0~load_int(257);
    var v'data = sc_0~load_ref();
    return (sc_0, (v'id, v'data));
}

(int, cell) $SetIdAndData$_from_tuple(tuple v) inline {
    var (int v'id, cell v'data) = __tact_tuple_destroy_2(v);
    return (v'id, v'data);
}

(int, cell) $SetIdAndData$_to_external(((int, cell)) v) inline {
    var (v'id, v'data) = v; 
    return (v'id, v'data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: Test
;;

builder $Test$_store(builder build_0, (int, cell) v) inline {
    var (v'id, v'anotherData) = v;
    build_0 = build_0.store_uint(v'id, 32);
    build_0 = build_0.store_ref(v'anotherData);
    return build_0;
}

(slice, ((int, cell))) $Test$_load(slice sc_0) inline {
    var v'id = sc_0~load_uint(32);
    var v'anotherData = sc_0~load_ref();
    return (sc_0, (v'id, v'anotherData));
}

(int, cell) $Test$_from_tuple(tuple v) inline {
    var (int v'id, cell v'anotherData) = __tact_tuple_destroy_2(v);
    return (v'id, v'anotherData);
}

(int, cell) $Test$_to_external(((int, cell)) v) inline {
    var (v'id, v'anotherData) = v; 
    return (v'id, v'anotherData);
}

builder $Test$init$_store(builder build_0, ((int, cell)) v) inline {
    var ((v'idAndData'id, v'idAndData'data)) = v;
    build_0 = $SetIdAndData$_store(build_0, (v'idAndData'id, v'idAndData'data));
    return build_0;
}

(slice, (((int, cell)))) $Test$init$_load(slice sc_0) inline {
    var v'idAndData = sc_0~$SetIdAndData$_load();
    return (sc_0, (v'idAndData));
}

(int, cell) $Test$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$Test$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        ((int, cell) $idAndData) = $sc~$Test$init$_load();
        $sc.end_parse();
        return $Test$_contract_init($idAndData);
    }
}

() $Test$_contract_store((int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $Test$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $Test$_init_child(cell sys', (int, cell) $idAndData) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: Test
    cell mine = __tact_dict_get_code(source, 44104);
    contracts = __tact_dict_set_code(contracts, 44104, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $Test$init$_store(b, ($idAndData));
    return (mine, b.end_cell());
}