#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_Test2.headers.fc";
#include "tact_Test2.stdlib.fc";
#include "tact_Test2.storage.fc";

;;
;; Contract Test2 functions
;;

tuple $Test2$_contract_init() impure inline_ref {
    tuple $self = null();
    return $self;
}

(tuple, slice) $Test2$_fun_calcTest(tuple $self, (int, cell) $m) impure inline_ref {
    var ($self) = $self;
    var (($m'id, $m'data)) = $m;
    var ($init'code, $init'data) = $Test$_init_child(__tact_context_sys, ($m'id, $m'data));
    return ($self, __tact_compute_contract_address(0, $init'code, $init'data));
}

;;
;; Receivers of a Contract Test2
;;

((tuple), ()) $Test2$_internal_binary_Deploy(tuple $self, (int) $deploy) impure inline {
    var $self = $self;
    var ($deploy'queryId) = $deploy;
    $self~$Test2$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return ($self, ());
}

;;
;; Get methods of a Contract Test2
;;

_ %calcTest(tuple $m) method_id(82187) {
    (int, cell) $m = $SetIdAndData$_from_tuple($m);
    var self = $Test2$_contract_load();
    var res = self~$Test2$_fun_calcTest($m);
    return res;
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract Test2
;;

(tuple, int) $Test2$_contract_router_internal(tuple self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$Test2$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $Test2$_contract_load();
    
    ;; Handle operation
    int handled = self~$Test2$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $Test2$_contract_store(self);
}
